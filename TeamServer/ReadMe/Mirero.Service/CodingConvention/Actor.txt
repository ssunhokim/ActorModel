목차
 1. 액터 클래스 구성
 2. 액터 클래스 이름 코딩 컨벤션
 3. 로그 멤버 변수 코딩 컨벤션
 4. 액터 멤버 변수 코딩 컨벤션
 5. 액터 생성 함수(Props, Constructor)
 6. 액터 메소드 코딩 컨벤션
 7. 고정 Sender 메시지 보내기 코딩 컨벤션
 8. 동적 Sender 메시지 보내기 코딩 컨벤션
 9. 부모 액터(Context.Parent) 메시지 보내기 코딩 컨벤션
10. 자식 액터(Context.Child) 메시지 보내기 코딩 컨벤션
11. 자식 액터들(Context.GetChildren) 메시지 보내기 코딩 컨벤션


1. 액터 클래스 구성
	public sealed class [액터 이름]Actor : ReceiveActor
	// public sealed class [액터 이름]RouterActor : ReceiveActor (라우터 액터일 때)
	{
		 #region 메시지
		 1. 전용 메시지(Inner class, Local)
		 #endregion

		 2. 멤버 변수(로그, ...)

		 3. 액터 Lifecycle 함수
			 - Props         // 필수
			 - Constructor   // 필수
			 - PostRestart
			 - PreStart
			 - PreRestart
			 - PostStop

		 4. 메시지 처리 함수(Handle)
	}


2. 액터 클래스 이름 코딩 컨벤션
	2.1 액터 클래스는 public 접근 제어자를 사용한다.
	
	2.2 메시지 클래스는 sealed로 정의한다(기본적으로 상속 시키지 않는다).

	2.3 Actor 접미사를 사용한다.

	2.4 라우터 액터일 때는 RouterActor 접미사를 사용한다.

	예1. 올바른 예
	public sealed class HelloActor : ReceiveActor

	예1. 잘못된 예
	public class HelloActor : ReceiveActor				// sealed를 사용하지 않았다.

	예1. 잘못된 예
		class sealed HelloActor : ReceiveActor			// public 접근 제어자를 사용하지 않았다.

	예1. 잘못된 예
		public sealed class Hello : ReceiveActor		// Actor 접미사를 사용하지 않았다.


	예2. 올바른 예(라우터 액터일 때)
	public sealed class HelloRouterActor : ReceiveActor

	예2. 잘못된 예
	public sealed class HelloActor : ReceiveActor		// RouterActor 접미사를 사용하지 않았다.


3. 로그 멤버 변수 코딩 컨벤션
	3.1 로그 멤버 변수는 private 접근 제어자를 사용한다.

	3.2 로그 멤버 변수는 readonly를 사용한다.

	3.3 로그 멤버 변수 이름은 "_logger"이다.
    
	예.
	private readonly ILoggingAdapter _logger = Context.GetLogger();


4. 액터 멤버 변수 코딩 컨벤션
	4.1 데이터 변수 이름에 타입은 명시하지 않는다.

    4.2 데이터 변수 이름에 단/복수를 명시한다.

    4.3 필드를 사용하지 않는다.

    4.4 멤버 변수는 대문자로 시작한다.

    4.5 생성자에서만 값을 초기화하는 변수 타입은 readonly 키워드를 사용한다.
    
	예1. 올바른 예
	public IActorRef Hello;
	public List<string> Names;
    
	예1. 잘못된 예
	public IActorRef HelloActor;        // 타입(Actor)을 이름에 명시하지 않는다. HelloActor -> Hello
	public List<string> NameList        // 타입(List)을 이름에 명시하지 않는다. NameList -> Names
    
    
	예2. 올바른 예
	public string Name;
    
	예2. 잘못된 예
	public string Name { get; set; }    // 필드를 사용하지 않는다.
    
	예2. 잘못된 예
	public string _name;                // 멤버 변수는 대문자로 시작한다.
										// 멤버 변수는 "_"을 사용하지 않는다.
    
	예2. 잘못된 예
	public string name;                  // 멤버 변수는 대문자로 시작한다.
    
    
	예3. 올바른 예
	public readonly string Name;        // 생성자 초기화 후 변경이 없을 때
	public HelloActor(string name)
	{
			Name = name;    
	}
    
	예3. 잘못된 예
	public string Name;                  // readonly 키워드가 생략되어 있다(생성자 초기화 후 변경이 없을 때)
	public HelloActor(string name)
	{
			Name = name;    
	}


5. 액터 생성 함수(Props, Constructor)
	5.1 Props 함수에서 Actor 성질(라우터, 장애 처리 전략, ...)을 결정한다.

	예1. 기본
	public static Props Props()
	{
		    return Akka.Actor.Props.Create(() => new HelloActor());
	}

		
	예2. 라우터가 있을 때
	public static Props Props()
	{
		    return Akka.Actor.Props.Create(() => new HelloActor())
		        .WithRouter(FromConfig.Instance);    // App.config 파일 "akka.actor.deployment"에 Actor 라우터를 설정한다.
	}

		
	예3. 장애 처리 전략이 있을 때
	public static Props Props()
	{
		    return Akka.Actor.Props.Create(() => new HelloActor())
		        .WithSupervisorStrategy(new OneForOneStrategy(ex =>
		            {
		                // 사용자 정의 장애 처리 전략(Restart, Stop, ...)
		
		                // Akka 기본 장애 처리 전략
		                return Akka.Actor.SupervisorStrategy.DefaultStrategy.Decider.Decide(ex);
		            }));
	}

		
	예4. 라우터와 장애 처리 전략이 있을 때
	public static Props Props()
	{
		    return Akka.Actor.Props.Create(() => new HelloActor())
		        .WithRouter(FromConfig.Instance)    // App.config 파일 "akka.actor.deployment"에 Actor 라우터를 설정한다.
		        .WithSupervisorStrategy(new OneForOneStrategy(ex =>
		            {
		                // 사용자 정의 장애 처리 전략(Restart, Stop, ...)
		
		                // Akka 기본 장애 처리 전략
		                return Akka.Actor.SupervisorStrategy.DefaultStrategy.Decider.Decide(ex);
		            }));
	}

		
6. 액터 메소드 코딩 컨벤션
	6.1 메시지 처리 함수는 "Receive<T>(_ => Handle(_))" 형식으로 등록한다.

    6.2 메시지 처리 함수(Receive에서 호출되는 함수) 이름은 "Handle"이다.

    6.3 생성과 관련된 함수(Props, Constructor)를 제외한 모든 함수는 privatie이다.
    
	예1. 올바른 예
	Receive<Start>(_ => Handle(_));

	예1. 잘못된 예
	Receive<Start>(start => Handle(start));			// start		-> _


    예2. 올바른 예
    private void Handle(Start msg) { ... }

    예2. 잘못된 예
    public void HandleStart(Start msg) { ... }       // public       -> private
                                                     // HandleStart  -> Handle
    예2. 잘못된 예
    public void DoSomething(int x) { ... }           // public       -> private
        

7. 고정 Sender 메시지 보내기 코딩 컨벤션
	7.1 변수로 메시지 보낸 액터 이름을 표시한다.

	7.2 변수를 통해 메시지를 보낸다.

	예. 올바른 예
	IActorRef loader = Sender;			// 메시지 보낸 액터을 변수 이름을 통해 알 수 있다.
	loader.Tell( ... );

	예. 잘못된 예
	Sender.Tell( ... );                 // 메시지 보낸 액터를 알 수 없다.


8. 동적 Sender 메시지 보내기 코딩 컨벤션
	8.1 변수로 메시지 보낸 액터 이름을 표시하지 않는다.
		Why? 메시지 보낸 액터 이름을 고정 시킬 수 없다.

	예. 올바른 예
	Sender.Tell( ... );					// 메시지 보낸 액터를 고정 시킬 수 없다

	예. 잘못된 예
	IActorRef loader = Sender;			// 메시지 보낸 액터을 고정 시켰다.
	loader.Tell( ... );


9. 부모 액터(Context.Parent) 메시지 보내기 코딩 컨벤션
	9.1 변수로 부모 액터 이름을 표시한다.

	9.2 변수를 통해 메시지를 보낸다.
	
	예. 올바른 예
	IActorRef loader = Context.Parent;	// 부모 액터을 변수 이름을 통해 알 수 있다.
	loader.Tell( ... );
	
	예. 잘못된 예
	Context.Parent.Tell( ... );			// 부모 액터를 알 수 없다.
	

10. 자식 액터(Context.Child) 메시지 보내기 코딩 컨벤션
	10.1 변수로 자식 액터 이름을 표시한다.

	10.2 변수를 통해 메시지를 보낸다.

	예. 올바른 예
	IActorRef loader = Context.Child(ActorPaths.LoaderActor.Name);
	loader.Tell( ... );

	예. 잘못된 예
	Context.Child(ActorPaths.LoaderActor.Name).Tell( ... );


11. 자식 액터들(Context.GetChildren) 메시지 보내기 코딩 컨벤션
	11.1 변수로 자식 액터 이름을 표시하지 않는다.
	   Why? 자식 액터 이름을 고정 시킬 수 없다.

	예.
	foreach (IActorRef loader in Context.GetChildren())
	{
	   loader.Tell( ... );
	}
