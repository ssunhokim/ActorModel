<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<sectionGroup name="akka">
			<section name="akka.app" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
			<section name="akka.logging" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
			<section name="akka.actor" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
			<section name="akka.remote" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
			<section name="akka.cluster" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
			<section name="akka.petabridge" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka"/>
		</sectionGroup>
		<section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog"/>
	</configSections>

	<!--
	#
	# INFO: App.config 파일 구성
	#
	# <akka>                 # Akka 환경 설정
	#    <akka.app/>         # 서비스 환경 설정
	#    <akka.logging/>     # Akka logging 환경 설정
	#    <akka.actor/>       # Akka Actor 환경 설정
	#    <akka.remote/>      # Akka Remote 환경 설정
	#    <akka.cluster/>     # Akka Cluster 환경 설정 
	#    <akka.petabridge/>  # Akka Petabridge-Cmd 환경 설정
	# </akka>                # NLog 환경 설정
	# <nlog/>
	#
	-->
	<!--
	#
	# INFO: HOCON (Human-Optimized Object Configuration Notation)
	#   - 규칙: https://github.com/akkadotnet/HOCON
	#   - 주석: HOCON에서 주석은 '#'입니다.
	#
	-->

	<!-- Akka 환경 설정 -->
	<akka>
		<!-- 서비스 환경 설정 -->
		<akka.app>
			<hocon>
				<![CDATA[
					akka {
						service {
							###################################
							# 서비스
							###################################
							#
							# TODO: 서비스 이름과 서비스 설명을 변경한다.
							#       서비스 이름은 "서비스 관리자"에서 확인할 수 있다.
							#
							name = "BLUEService"
							description = "MireroSystem Super Service"

							###################################
							# 서비스 사용자 정의 설정
							###################################
							# 
							# TODO: 서비스 세부 사용자 정의 설정을 한다.
							#
							# 예.
							#clipper {
							#  aliase = CLIPPER02
							#  controlCenterIP = 127.0.0.1
							#  controlCenterPort = 9000
							#  saveActorCount = 10
							#}
						}

						system {
							###################################
							# 액터 시스템 
							###################################
							# ActorSystem 이름은 "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-"만 제공한다.
							# ActorSystem 이름은 공백을 제공하지 않는다.
							#
							# 올바른 예.
							#   "BLUEService"
							#   "BLUE-2018-Service"
							#
							# 잘못된 예.
							#   "BLUE System"     # 공백은 사용할 수 없다.
							#   "BLUE/System"     # '-'을 제외한 특수 기호 '/', '.', ...등은 사용할 수 없다.
							#
							# TODO: 액터 시스템 이름을 변경한다.
							#
							name = "BLUEService"
						}
					}
				]]>
			</hocon>
		</akka.app>

		<!-- Akka logging 환경 설정 -->
		<akka.logging>
			<hocon>
				<![CDATA[
					#
					# Akka HOCON 전체 정보
					# https://github.com/akkadotnet/akka.net/blob/dev/src/core/Akka/Configuration/Pigeon.conf
					#

					akka {
						###################################
						# 로그 설정
						###################################
						#
						# TODO: 로그 설정을 운영 환경 기준으로 변경한다.
						#

						#
						## Log level for the very basic logger activated during AkkaApplication startup
						## Options: OFF, ERROR, WARNING, INFO, DEBUG
						#
						#stdout-loglevel = DEBUG

						#
						## Log level used by the configured loggers (see "loggers") as soon
						## as they have been started; before that, see "stdout-loglevel"
						## Options: OFF, ERROR, WARNING, INFO, DEBUG
						#
						#loglevel = DEBUG

						#
						# INFO: 서비스가 시작할 때 Akka HOCON 정보를 출력한다.
						#
						## Log the complete configuration at INFO level when the actor system is started.
						## This is useful when you are uncertain of what configuration is used.
						log-config-on-start = on

						#
						## Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
						#
						loggers = [
							"Akka.Logger.NLog.NLogLogger, Akka.Logger.NLog"
						]

						actor {      
							debug {  
								###################################
								# 로그 출력 설정
								###################################
								# akka.loglevel이 DEBUG일 때만 해당 설정을 인식한다.
								#
								# TODO: akka.loglevel이 DEBUG일 때 로그 출력 범위를 변경한다.
								#

								#
								## enable function of Actor.loggable(), which is to log any received message
								## at DEBUG level, see the “Testing Actor Systems” section of the Akka
								## Documentation at http://akka.io/docs
								#
								#receive = on         # 기본값은 off다.

								#
								## enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
								#
								#autoreceive = on     # 기본값은 off다.

								#
								## enable DEBUG logging of actor lifecycle changes
								#
								#lifecycle = on       # 기본값은 off다.

								#
								## enable DEBUG logging of subscription changes on the eventStream
								#
								#event-stream = on    # 기본값은 off다.

								#
								## enable DEBUG logging of unhandled messages
								#
								#unhandled = on       # 기본값은 off다.
							}
						}
					}
				]]>
			</hocon>
		</akka.logging>

		<!-- Akka Actor 환경 설정 -->
		<akka.actor>
			<hocon>
				<![CDATA[
					#
					# Akka HOCON 전체 정보
					# https://github.com/akkadotnet/akka.net/blob/dev/src/core/Akka/Configuration/Pigeon.conf
					#

					akka {
						actor {
							###################################
							# user 액터 장해 허용 전략 지정
							###################################
							#
							# TODO: 네임스페이스와 실팽 파일 이름 기준으로 guardian-supervisor-strategy을 설정한다.
							#
							#guardian-supervisor-strategy = "[네임스페이스].UserSupervisorStrategy, [실행파일이름]"
							#
							# 예. 네임스페이스: MireroService.ActorService, 실행파일이름: MireroService
							#guardian-supervisor-strategy = "MireroService.ActorService.UserSupervisorStrategy, MireroService"

							deployment {
								###################################
								# 라우터 액터 설정
								###################################  
								#
								# TODO: 정적 라우터 액터 전략을 추가한다.
								#
								# 예. "/user/ParentActor/ChildRouterActor" 경로에 있는 ChildRouterActor 설정하기
								#
								#/ParentActor/ChildRouterActor {		# /user는 생략한다.
								#  router = round-robin-pool
								#  nr-of-instances = 3     # Router 세부 설정은 설계 문서에 정의하지 않는다.
								#}
							}
						}
					}
				]]>
			</hocon>
		</akka.actor>

		<!-- Akka Remote 환경 설정 -->
		<akka.remote>
			<hocon>
				<![CDATA[
					#
					# Akka.Remote HOCON 전체 정보
					# https://github.com/akkadotnet/akka.net/blob/dev/src/core/Akka.Remote/Configuration/Remote.conf
					#

					###################################
					# 원격 설정
					###################################
					#
					# 예.
					#akka {
					#  actor {
					#      provider = "Akka.Remote.RemoteActorRefProvider, Akka.Remote"
					#  }
					#
					#  remote {
					#    dot-netty.tcp {
					#      port = 0                        # bound to a dynamic port assigned by the OS
					#      hostname = 0.0.0.0          # listen on all interface
					#
					#		# If this value is set, this becomes the public address for the actor system on this
					#		# transport, which might be different than the physical ip address (hostname)
					#		# this is designed to make it easy to support private / public addressing schemes					
					#		public-hostname = 127.0.0.1
					#    }
					#    
					#    # 디버깅을 위해 failure detector 활동 시간을 변경한다.
					#    # 장시간 디버깅으로 인해 액터 시스템는 디버깅 중 액터가 파괴된 것으로 오인한다.
					#    transport-failure-detector {
					#
					#      # How often keep-alive heartbeat messages should be sent to each connection.
					#      heartbeat-interval = 60s          # 기본 값은 4s다.
					#
					#      # Number of potentially lost/delayed heartbeats that will be
					#      # accepted before considering it to be an anomaly.
					#      # This margin is important to be able to survive sudden, occasional,
					#      # pauses in heartbeat arrivals, due to for example garbage collect or
					#      # network drop.
					#      acceptable-heartbeat-pause = 20s  # 기본 값은 10s다.
					#    }
					#  }   
					#}

					#
					# TODO: 원격 액터 시스템일 때는 "예."를 참고하여 원격 환경을 정의한다.
					#       
					akka {  # 원격 환경 설정이 없어도 제거하면 안된다(제거하면 런타임 예외가 발생한다).
						actor {
						}
					}
				]]>
			</hocon>
		</akka.remote>

		<!-- Akka Cluster 환경 설정 -->
		<akka.cluster>
			<hocon>
				<![CDATA[
					#
					# Akka.Cluster HOCON 전체 정보
					# https://github.com/akkadotnet/akka.net/blob/dev/src/core/Akka.Cluster/Configuration/Cluster.conf
					#

					###################################
					# 클러스터 설정
					###################################
					#
					# 예.
					#akka {
					#  cluster {
					#  }
					#}

					#
					# TODO: 클러스터 액터 시스템일 때는 "예."를 참고하여 클러스터 환경을 정의한다.
					#
					akka {  # 클러스터 환경 설정이 없어도 제거하면 안된다(제거하면 런타임 예외가 발생한다).
					}
				]]>
			</hocon>
		</akka.cluster>
		
		<!-- Akka Petabridge-Cmd 환경 설정 -->
		<akka.petabridge>
			<hocon>
				<![CDATA[
					petabridge.cmd {
						# "0.0.0.0"을 입력하면 "127.0.0.1"로 접속할 수 있다.
						#
						# default IP address used to listen for incoming petabridge.cmd client connections
						# should be a safe default as it listens on "all network interfaces".
						host = "0.0.0.0"

						# 기본 포트는 9110이다.
						#
						# default port number(9110) used to listen for incoming petabridge.cmd client connections
						port = 9110

						# when true, logs all loaded palettes on startup
						log-palettes-on-startup = on
					}
				]]>
			</hocon>
		</akka.petabridge>		
	</akka>

	<!-- NLog 환경 설정 
	#
	# INFO: NLog autoReload가 true로 설정되어 있어 서비스 실행 중에 NLog 설정을 변경해서 저장하면 바로 적용된다.
	#       잘못된 형식을 저장하면 이전 형식으로 운영된다.
	#       그러므로 잘못된 형식 저장으로 인해 서비스 재시작을 할 필요는 없다.
	#     
	-->
	<!--
	#
	# INFO: throwExceptions가 "true"로 설정하면 NLog 환경 설정 오류가 있으면 
	#       예외를 발생 시켜 원일을 파악할 수 있도록 정보를 제공한다.
	#
	-->  
	<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		autoReload="true"
		throwExceptions="true">
		<targets>
			<!--
			#
			# TODO: 로그 파일 이름을 변경한다(지금은 MireroService.log과 MireroService.{##}.log 이다).
			# TODO: 로그 파일 경로(./log)를 변경한다.
			#
			-->
			<!--
			#
			# INFO: OS 환경 변수를 이용한 로그 파일 경로를 설정할 때는 environment:variable를 사용한다.
			#   예. 
			#   OS 환경 변수가 "SERVICE_HOME"일 때
			#
			# filename="${environment:variable=SERVICE_HOME}/log/MireroService.log"
			# archiveFileName="${environment:variable=SERVICE_HOME}/log/backup/MireroService.{##}.log"
			#
			-->
			<!--
			#
			# INFO: 로그 출력 형식
			# https://github.com/NLog/NLog/wiki
			#
			# [${date:format=yyyy/MM/dd HH\:mm\:ss.fff}]			
			#		=> [2018/01/25 13:44:04.959]
			#
			# [${pad:padding=5:inner=${threadid}}]						
			#		=> [    6]
			#
			# [${pad:padding=5:inner=${level:uppercase=true}}]  	
			#		=> [ INFO]
			#
			# [${event-context:item=logSource}]							
			#		=> [akka://BLUEService/user/HelloActor#437527797]
			#
			# [${logger}]														
			#		=> [MireroService.HelloActor] 
			#
			# ${message}														
			#		=> Hello! MireroSystem.
			#
			# ${exception:format=tostring}									
			#		=> 예외 정보
			#
			-->
			<target name="ColoredConsoleTarget" xsi:type="ColoredConsole"
				layout="[${date:format=yyyy/MM/dd HH\:mm\:ss.fff}][${pad:padding=5:inner=${threadid}}][${pad:padding=5:inner=${level:uppercase=true}}]${event-context:item=logSource}[${logger}] ${message} ${exception:format=tostring}"/>
			<target
				name="FileTarget"
				xsi:type="File"
				filename="./log/MireroService.log"
				archiveFileName="./log/backup/MireroService.{##}.log"
				archiveEvery="Day"
				archiveNumbering="DateAndSequence"
				archiveDateFormat="yyyyMMdd_HHmmss"
				maxArchiveFiles="21"
				layout="[${date:format=yyyy/MM/dd HH\:mm\:ss.fff}][${pad:padding=5:inner=${threadid}}][${pad:padding=5:inner=${level:uppercase=true}}]${event-context:item=logSource}[${logger}] ${message} ${exception:format=tostring}"
				encoding="Unicode"/>
		</targets>
		<rules>
			<!--
			#
			# INFO: NLog Log Level은 다음과 같다.
			#     Trace 
			#     > Debug
			#     > Info 
			#     > Warn
			#     > Error
			#     > Fatal
			#     > Off
			#
			# 예.
			# minLevel="Trace": 모든 로그를 출력한다.
			# minLevel="Info": Info, Warn, Error, Fatal까지만 로그를 출력한다.
			#
			-->
			<!--
			#
			# INFO: name 값을 통해 로그 출력 대상을 제어할 수 있다.
			#
			# 예.
			# name="*": 모든 로그를 출력한다.
			# name="ServiceManager.*": ${logger} 값이 "ServiceManager."으로 시작하는 로그만 출력한다.
			#       ${logger}는 값은 "[네임스페이스].[클래스]"이다.
			#
			-->
			<logger name="*" minLevel="Info" appendTo="FileTarget"/>
			<logger name="*" minLevel="Trace" appendTo="ColoredConsoleTarget"/>
		</rules>
	</nlog>

	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
	</startup>
</configuration>
