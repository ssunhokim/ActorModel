using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MireroService.Actors
{
    //===================================================================
    // 기본 예제 - 전용(Remote, Cluster) 메시지 클래스
    //===================================================================
    //
    // Why?
    // 전용 메시지 정의와 처리(Receive<T>)을 분리한다.
    // 모든 메시지(공용, 전용)는 Inner class로 정의한다.
    // 모든 메시지(공용, 전용)는 솔루션 탐색기에 표현이 동일하다.
    //
    // What?
    // 메시지 정의만 공유할 전용 메시지들을 Inner class로 묶는다.
    //
    // How?
    // 전용 메시지 정의만 물리적으로 분리하여 공유한다(참조 한다).
    //

    //=======================================
    // 전용(Remote, Cluster) 메시지 클래스 구성
    //=======================================
    // 
    // public sealed class [액터 클래스 이름]Message
    // {
    //      public sealed class 메시지
    //      {
    //          1. 필드                   // public [타입] [이름] { get; private set; }
    // 
    //          2. 메시지 생성자
    //      }
    //
    //      // 메시지 클래스들...
    // }
    //

    //=======================================
    // 전용(Remote, Cluster) 메시지 클래스 이름 코딩 컨벤션
    //=======================================
    // 1. 액터 클래스 이름에 Message 접미사를 사용한다.
    // 
    // 올바른 예.
    //  public sealed class HelloActorMessage           // 액터 클래스 이름: HelloActor
    //  public sealed class HelloRouterActorMessage     // 액터 클래스 이름: HelloRouterActor
    //
    // 잘못된 예.
    //  public sealed class HelloMessage                // 액터 클래스 이름: HelloActor
    //                                                  //      HelloMessage            -> HelloActorMessage
    //  public sealed class HelloRouterActorMessage     // 액터 클래스 이름: HelloRouterActor
    //                                                  //      HelloRouterActorMessage -> HelloRouterActorMessage
    //          
    public sealed class HelloActorMessage
    {
        //=======================================
        // Actor 메시지 코딩 컨벤션
        //=======================================
        // 
        // 1. 메시지 클래스는 sealed로 정의한다(기본적으로 상속 시키지 않는다).
        // 2. 데이터가 없는 메시지는 생성자을 생략한다.
        // 3. 메시지 데이터는 필드로 정의한다
        //      public [타입] [이름] { get; private set; }      // C# 6.0 이상에서는 "private set;"을 생략할 수 있다.
        // 4. 메시지 데이터는 생성자에서 초기화된 후 변경시키지 않는다.
        // 5. 목록 데이터도 불변을 제공한다.
        //      IEnumerable
        //      IReadOnlyCollection<T>
        //      IReadOnlyList<T>
        //      IReadOnlyDictionary<TKey, TValue>
        // 6. 데이터 변수 이름에 타입은 명시하지 않는다.
        // 7. 데이터 변수 이름에 단/복수를 명시한다.
        // 8. 메시지는 "메시지", "명령 메시지", "이벤트 메시지"로 구분한다.
        //		메시지				: (형용사) + 명사
        //		명령 메시지			: 현재형 동사 + (형용사) + 명사
        //		이벤트 메시지(시작)	: (형용사) + 명사 + 진행형 동사
        //		이벤트 메시지(완료)	: (형용사) + 명사 + 과거형 동사
        //
        // 올바른 예. 1
        //public sealed class Start { }
        //
        // 잘못된 예. 1
        //public sealed class Start
        //{
        //    public Start()        // 데이터가 없는 메시지 클래스에서는 생성자를 생략한다.
        //    {
        //    }
        //}
        //
        //
        // 올바른 예. 2
        //public sealed class Stop
        //{
        //    public string From { get; private set; }
        //
        //    public Stop(string from)
        //    {
        //        From = from;
        //    }
        //}
        //
        // 잘못된 예. 2
        //public sealed class Stop
        //{
        //    public string From { get; set; }          // 'set;'은 반드시 'private set;'이어야 한다.
        //    //...
        //}
        //
        //
        // 올바른 예. 3
        // public IActorRef Hello { get; private set; }
        // public IReadOnlyList<string> Names { get; private set; }
        // 
        // 잘못된 예. 3
        // public IActorRef HelloActor { get; private set; }             // 타입(Actor)을 이름에 명시하지 않는다. HelloActor -> Hello
        // public IReadOnlyList<string> NameList { get; private set; }   // 타입(List)을 이름에 명시하지 않는다. NameList -> Names
        //
        //
        // 올바른 예. 4
        // 메시지: (형용사) + 명사
        //		Files						            // 명사
        //		SelectedFiles				            // 형용사 + 명사
        // 
        // 명령 메시지: 현재형 동사 + (형용사) + 명사
        //		CreateFiles					             // 현재형 동사 + 명사
        //		CreateSelectedFiles		                 // 현재형 동사 + 형용사 + 명사
        // 
        // 이벤트 메시지(시작): (형용사) + 명사 + 진행형 동사
        //		FilesCreating				             // 명사 + 진행형 동사
        //		SelectedFilesCreating		             // 형용사 + 명사 + 진행형 동사
        //
        // 이벤트 메시지(완료): (형용사) + 명사 + 과거형 동사
        //		FilesCreated					         // 명사 + 과거형 동사
        //		SelectedFilesCreated		             // 형용사 + 명사 + 과거형 동사
        //

        public sealed class Suspend
        {
            public string Reason { get; private set; }

            public Suspend(string reason)
            {
                Reason = reason;
            }
        }

        public sealed class Resume { }
    }
}
